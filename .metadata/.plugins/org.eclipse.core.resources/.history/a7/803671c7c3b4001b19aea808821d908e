/*
 * ArrayEmployees.h
 *
 *  Created on: 14 may. 2021
 *      Author: ignac
 */

#ifndef ARRAYEMPLOYEES_H_
#define ARRAYEMPLOYEES_H_
//***ESTRUCTURAS
struct
{
 int id;
 char name[51];
 char lastName[51];
 float salary;
 int sector;
 int isEmpty;
}typedef Employee;
//***
/*
 * \brief To indicate that all position in the array are empty,
 * this function put the flag (isEmpty) in TRUE in all
 * position of the array
 * \param list Employee* Pointer to array of employees
 * \param len int Array length
 * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
 *
 */
int initEmployees(Employee* list, int len)
{
	int i;
	int retorno=0;
	if (array != NULL && len > 0)
	{
		for (i = 0; i < len; i++)
		{
			list[i].isEmpty = VACIO;
		}
	}else{
		retorno= -1;
	}
 return retorno;
}

/*
 * \brief add in a existing list of employees the values received as parameters
 * in the first empty position
 * \param list employee*
 * \param len int
 * \param id int
 * \param name[] char
 * \param lastName[] char
 * \param salary float
 * \param sector int
 * \return int Return (-1) if Error [Invalid length or NULL pointer or without
free space] - (0) if Ok
 */

int addEmployee(Employee* list, int len, int id, char name[],char
lastName[],float salary,int sector)
{
	int respuesta = -1;
	Employee bufferEmployee
	if(list != NULL && len>0 && )
 return -1;
}


/** \brief find an Employee by Id en returns the index position in array.
 *
 * \param list Employee*
 * \param len int
 * \param id int
 * \return Return employee index position or (-1) if [Invalid length or NULL
pointer received or employee not found]
 *
 */
int findEmployeeById(Employee* list, int len,int id)
{
	int retorno = -1;
		int i;
		if (array != NULL && len > 0)
		{
			for (i = 0; i < len; i++)
			{
				if (list[i].id== id && list[i].isEmpty == OCUPADO)
				{
					retorno = i;
					break;
				}
			}
		}

		return retorno;
}
/*
 *  \brief Sort the elements in the array of employees, the argument order
 *  indicate UP or DOWN order
 *
 * \param list Employee*
 * \param len int
 * \param order int [1] indicate UP - [0] indicate DOWN
 * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
 *
 */
int sortEmpleados(eEmpleado arrayEmpleado[], int tamArray)
{
	eEmpleado auxiliarEmpleado;

	int i;
    int j;
    char auxiliarOpcion[50];
    int opcion;

    printf("\n\nComo desea ordenar la lista? 1-POR APELLIDO / 2-POR SECTOR: ");
    fflush(stdin);
    gets(auxiliarOpcion);
    while(esNumerico(auxiliarOpcion)==0)
    {
        printf("\nUsted ha ingresado una opcion incorrecta. Ingrese nuevamente: ");
        fflush(stdin);
        gets(auxiliarOpcion);
    }
    opcion=atoi(auxiliarOpcion);
    switch(opcion)
    {
    case 1:
        for(i=0; i<tamArray-1; i++)
        {
            for(j=i+1; j<tamArray; j++)
            {
                if(strcmp(arrayEmpleado[i].apellido,arrayEmpleado[j].apellido))
                {
                    auxiliarEmpleado=arrayEmpleado[i];
                    arrayEmpleado[i]=arrayEmpleado[j];
                    arrayEmpleado[j]=auxiliarEmpleado;
                }
            }
        }
        break;

#endif /* ARRAYEMPLOYEES_H_ */
